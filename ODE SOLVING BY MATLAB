Note:How to use Matlab solve the ODE problem.
*****The ODE initial problem is y' = 1 - t + 4y,y(0) = 1, h is the step length, calculated from 0 to 2.*****
-------------------------------------------------------------------------
#Improved Euler Method#(Henu Formula)
  --->
  function D1=f(t,y)
  t = 0;y = 1;
  h = 0.025;n = 2/h;
  for j=1:n
      fn = 1-t+4*y;
      fnh = 1-(t+h)+4*(y+h*fn);
      y = y+h/2*(fn+fnh);
      t = t+h;
      t
      y
  end
    $$Variation of Step Size$$
      Set an error tolerance e. Using Euler Method and Henu to calculate yn. If yn+1's estimated error(yn+1 from Euler minus yn+1 from 
      Henu) is larger than e, decrease h. Else, it is okay. 
----------------------------------------------------------
#The Euler Method# (too simple, thus I just write briefly)
  --->
  function D1=f(t,y)
  t = 0;y = 1;
  h = 0.025;n = 2/h;
  for j=1:n
      fn = 1-t+4*y;
      y = y+h*fn;
      t = t+h;
      t
      y
  end
  
    $$Backward Euler Formula$$ (Simply saying, calculate from yn+1 rather than yn)
        --->
        function D1=f(t,y)
        t = 0;y = 1;
        h = 0.025;n = 2/h;
        for j=1:n
          fn = 1-t+4*y;
          fn1 = 1-(t+h)+4*(y+h*fn);
          y = y+h*fn1;
          t = t+h;
          t
          y
        end
 -----------------------------------------------------------------------
 #The Runge-Kutta Method#
   The MOST CLASSICAL one, is called "forth-order four-stage Runge-Kutta Method". Local truncation error is h5.
   Formula: yn+1 = yn + h * (kn1 + 2 * kn2 + 2 * kn3 + kn4) / 6; 
              $$ "h * (kn1 + 2 * kn2 + 2 * kn3 + kn4) / 6" can be interpreted as average slope.$$
            kn1 = f(tn,yn); kn2 = f(tn + h/2, yn + h * kn1 / 2); kn3 = f(tn + h/2, yn + h * kn2 / 2); kn4 = f(tn + h, yn + h * kn3);
   --->
   function D1 = f(t,y)
   t = 0; y = 1;
   h = 0.025; n = 2 / h;
   for j = 1:n
     k1 = 1 - t + 4 * y;
     k2 = 1 - (t + h / 2) + 4 * (y + h * k1 / 2);
     k3 = 1 - (t + h / 2) + 4 * (y + h * k2 / 2);
     k4 = 1 - (t + h) + 4 * (y + h * k3);
     y = y + h * (k1 + 2 * k2 + 2 * k3 + k4) / 6;
     t = t + h;
     t
     y
   end
-------------------------------------------------------------------------
#Adams Methods#
  yn+1 - yn = int(y',t,tn,tn+1)
  However, the integration is not easy to solve. Thus, we choose Power Series to represent the y'. y' is represented by a polynomial Pk
  of degree k.
  Similar to RK, usually we use forth-order Adams-Bashforth formula.
  Pk = a0 + a1 * t + a2 * t^2 + ... + ak * t^k;
  To solve a0, a1, ..., ak, we need k points. Pk(t) = f(t,y).
  __This is called Adams-Bashforth formula. 
    The forth-order Adams-Bashforth Formula, yn+1 = yn + h / 24 * (55 * fn - 59 * fn-1 + 37 * fn-2 - 9 * fn-3).
    
    $$ Adams-Moulton Formula $$
    This is for calculating the "non-calsual" case - future case, yn+1.
    Qk = b0 + b1 * t + b2 * t^2 + ... + bk * t^k; %The coefficients are determined by (tn,yn), (tn+1,yn+1), (tn-1,yn-1)...
    Notes: 1.the first-order Adams-Moulton formula is just the backward Euler Formula.
           2.the implicit coefficient can only have one. Or else it will be non-casual.
           3.the forth-order Adams-Moulton Formula, yn+1 = yn + h / 24 * (9 * fn+1 + 19 * fn - 5 * fn-1 + fn-2).
  
        
        
